"use strict";(self.webpackChunklearnsutra=self.webpackChunklearnsutra||[]).push([[3082],{2159:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"Dynamic Programming/Questions/maximum-score-from-mul-ops","title":"Maximum Score from Performing Multiplication Operations","description":"You are given two\xa00-indexed\xa0integer arrays\xa0nums\xa0and\xa0multipliers\xa0of size\xa0n\xa0and\xa0m\xa0respectively, where\xa0n >= m.","source":"@site/docs/Dynamic Programming/Questions/maximum-score-from-mul-ops.md","sourceDirName":"Dynamic Programming/Questions","slug":"/Dynamic Programming/Questions/maximum-score-from-mul-ops","permalink":"/docs/Dynamic Programming/Questions/maximum-score-from-mul-ops","draft":false,"unlisted":false,"editUrl":"https://github.com/absaini25/learnsutra/docs/Dynamic Programming/Questions/maximum-score-from-mul-ops.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Maximal square in a matrix","permalink":"/docs/Dynamic Programming/Questions/maximal-square"},"next":{"title":"Line Sweep: A Logical Overview","permalink":"/docs/Miscleneous/line-sweep"}}');var t=i(4848),s=i(8453);const l={},o="Maximum Score from Performing Multiplication Operations",c={},a=[];function m(e){const n={code:"code",em:"em",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"maximum-score-from-performing-multiplication-operations",children:"Maximum Score from Performing Multiplication Operations"})}),"\n",(0,t.jsxs)(n.p,{children:["You are given two\xa00-indexed\xa0integer arrays\xa0",(0,t.jsx)(n.code,{children:"nums"}),"\xa0and\xa0",(0,t.jsx)(n.code,{children:"multipliers"}),"\xa0of size\xa0",(0,t.jsx)(n.code,{children:"n"}),"\xa0and\xa0",(0,t.jsx)(n.code,{children:"m"}),"\xa0respectively, where\xa0",(0,t.jsx)(n.code,{children:"n >= m"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["You begin with a score of\xa0",(0,t.jsx)(n.code,{children:"0"}),". You want to perform\xa0exactly\xa0",(0,t.jsx)(n.code,{children:"m"}),"\xa0operations. On the\xa0",(0,t.jsx)(n.code,{children:"ith"}),"\xa0operation (0-indexed) you will:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Choose one integer\xa0",(0,t.jsx)(n.code,{children:"x"}),"\xa0from\xa0either the start or the end\xa0of the array\xa0",(0,t.jsx)(n.code,{children:"nums"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Add\xa0",(0,t.jsx)(n.code,{children:"multipliers[i] * x"}),"\xa0to your score.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Note that",(0,t.jsx)(n.code,{children:"multipliers[0]"}),"corresponds to the first operation,\xa0",(0,t.jsx)(n.code,{children:"multipliers[1]"}),"\xa0to the second operation, and so on."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Remove\xa0",(0,t.jsx)(n.code,{children:"x"}),"from",(0,t.jsx)(n.code,{children:"nums"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Return\xa0*the\xa0maximum\xa0score after performing\xa0*",(0,t.jsx)(n.code,{children:"m"}),"\xa0",(0,t.jsx)(n.em,{children:"operations."})]}),"\n",(0,t.jsx)(n.p,{children:"Example 1:"}),"\n",(0,t.jsx)(n.p,{children:"Input: nums = [1,2,3], multipliers = [3,2,1]\nOutput: 14\nExplanation:\xa0An optimal solution is as follows:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Choose from the end, [1,2,3], adding 3 * 3 = 9 to the score."}),"\n",(0,t.jsx)(n.li,{children:"Choose from the end, [1,2], adding 2 * 2 = 4 to the score."}),"\n",(0,t.jsx)(n.li,{children:"Choose from the end, [1], adding 1 * 1 = 1 to the score.\nThe total score is 9 + 4 + 1 = 14."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example 2:"}),"\n",(0,t.jsx)(n.p,{children:"Input: nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]\nOutput: 102\nExplanation: An optimal solution is as follows:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Choose from the start, [-5,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score."}),"\n",(0,t.jsx)(n.li,{children:"Choose from the start, [-3,-3,-2,7,1], adding -3 * -5 = 15 to the score."}),"\n",(0,t.jsx)(n.li,{children:"Choose from the start, [-3,-2,7,1], adding -3 * 3 = -9 to the score."}),"\n",(0,t.jsx)(n.li,{children:"Choose from the end, [-2,7,1], adding 1 * 4 = 4 to the score."}),"\n",(0,t.jsx)(n.li,{children:"Choose from the end, [-2,7], adding 7 * 6 = 42 to the score.\nThe total score is 50 + 15 - 9 + 4 + 42 = 102."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Constraints:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"n == nums.length"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"m == multipliers.length"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"1 <= m <= 300"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"m <= n <= 105"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"-1000 <= nums[i], multipliers[i] <= 1000"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class Solution {\n\n    public int maximumScore(int[] nums, int[] multipliers) {\n        int m = multipliers.length;\n        // Cache with default values of 0, marking uncalculated results\n        int[][] cache = new int[m][m]; \n        return calculateMaxScore(nums, multipliers, m, 0, cache);\n    }\n\n    private int calculateMaxScore(int[] nums, int[] multipliers, int remainingOps, int leftIdx, int[][] cache) {\n        // Base case: No operations left\n        if (remainingOps == 0) {\n            return 0;\n        }\n\n        // Use cached result if already calculated\n        if (cache[remainingOps - 1][leftIdx] != 0) {\n            return cache[remainingOps - 1][leftIdx];\n        }\n\n        // Calculate indices and current multiplier\n        int rightIdx = nums.length - (multipliers.length - remainingOps) + leftIdx - 1;\n        int multiplier = multipliers[multipliers.length - remainingOps];\n\n        // Compute the maximum score\n        int scoreFromLeft = multiplier * nums[leftIdx] + calculateMaxScore(nums, multipliers, remainingOps - 1, leftIdx + 1, cache);\n        int scoreFromRight = multiplier * nums[rightIdx] + calculateMaxScore(nums, multipliers, remainingOps - 1, leftIdx, cache);\n\n        // Cache the result\n        cache[remainingOps - 1][leftIdx] = Math.max(scoreFromLeft, scoreFromRight);\n        return cache[remainingOps - 1][leftIdx];\n    }\n}\n\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def maximumScore(self, nums: list[int], multipliers: list[int]) -> int:\n        m = len(multipliers)\n        n = len(nums)\n        # Initialize cache with None to mark uncalculated results\n        cache = [[None] * m for _ in range(m)]\n\n        def calculate_max_score(remaining_ops: int, left_idx: int) -> int:\n            # Base case: No operations left\n            if remaining_ops == 0:\n                return 0\n\n            # Use cached result if available\n            if cache[remaining_ops - 1][left_idx] is not None:\n                return cache[remaining_ops - 1][left_idx]\n\n            # Calculate indices and current multiplier\n            right_idx = n - (m - remaining_ops) + left_idx - 1\n            multiplier = multipliers[m - remaining_ops]\n\n            # Recursively compute the maximum score\n            score_from_left = multiplier * nums[left_idx] + calculate_max_score(remaining_ops - 1, left_idx + 1)\n            score_from_right = multiplier * nums[right_idx] + calculate_max_score(remaining_ops - 1, left_idx)\n\n            # Cache and return the result\n            cache[remaining_ops - 1][left_idx] = max(score_from_left, score_from_right)\n            return cache[remaining_ops - 1][left_idx]\n\n        return calculate_max_score(m, 0)\n\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var r=i(6540);const t={},s=r.createContext(t);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);