"use strict";(self.webpackChunklearnsutra=self.webpackChunklearnsutra||[]).push([[1712],{1443:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>a,frontMatter:()=>d,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"Cheat Sheets/python-for-dsa","title":"Python knowledge for DSA","description":"General","source":"@site/docs/Cheat Sheets/python-for-dsa.md","sourceDirName":"Cheat Sheets","slug":"/Cheat Sheets/python-for-dsa","permalink":"/docs/Cheat Sheets/python-for-dsa","draft":false,"unlisted":false,"editUrl":"https://github.com/absaini25/learnsutra/docs/Cheat Sheets/python-for-dsa.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"binary-search-template","permalink":"/docs/Binary Search/binary-search-template"},"next":{"title":"Introduction","permalink":"/docs/Dynamic Programming/intro"}}');var r=s(4848),t=s(8453);const d={},l="Python knowledge for DSA",c={},o=[{value:"General",id:"general",level:2},{value:"Defining classes and methods",id:"defining-classes-and-methods",level:3},{value:"<strong>Defining a Class</strong>",id:"defining-a-class",level:4},{value:"<strong>Constructor: <code>__init__</code></strong>",id:"constructor-__init__",level:4},{value:"<strong>Avoid Mutable Default Arguments</strong>",id:"avoid-mutable-default-arguments",level:5},{value:"<strong>Defining Methods</strong>",id:"defining-methods",level:4},{value:"<strong>Nested Classes and Methods</strong>",id:"nested-classes-and-methods",level:4},{value:"<strong>Nested Classes</strong>",id:"nested-classes",level:5},{value:"<strong>Nested Methods</strong>",id:"nested-methods",level:5},{value:"<strong>Instantiating and Using a Class</strong>",id:"instantiating-and-using-a-class",level:4},{value:"<strong>Key Takeaways</strong>",id:"key-takeaways",level:4},{value:"Conditions",id:"conditions",level:2},{value:"<strong>Basic Conditional Statements</strong>",id:"basic-conditional-statements",level:3},{value:"<strong>Comparison Operators</strong>",id:"comparison-operators",level:3},{value:"<strong>Logical Operators</strong>",id:"logical-operators",level:3},{value:"<strong>Membership Operators</strong>",id:"membership-operators",level:3},{value:"<strong>Ternary Conditions</strong>",id:"ternary-conditions",level:3},{value:"List",id:"list",level:2},{value:"Array Slicing",id:"array-slicing",level:3},{value:"<strong>Syntax</strong>",id:"syntax",level:3},{value:"<strong>Examples</strong>",id:"examples",level:3},{value:"<strong>Tips</strong>:",id:"tips",level:3},{value:"Using as a stack",id:"using-as-a-stack",level:3},{value:"<strong>Operations</strong>:",id:"operations",level:3},{value:"<strong>Example</strong>:",id:"example",level:3},{value:"<strong>Notes</strong>:",id:"notes",level:3},{value:"Zipping lists",id:"zipping-lists",level:3},{value:"Example 1: Basic Usage of <code>zip()</code> with Equal Lists",id:"example-1-basic-usage-of-zip-with-equal-lists",level:4},{value:"Example 2: <code>zip()</code> with Unequal Length Lists",id:"example-2-zip-with-unequal-length-lists",level:4},{value:"Note",id:"note",level:4},{value:"List comprehension",id:"list-comprehension",level:2},{value:"<strong>Syntax of List Comprehension</strong>:",id:"syntax-of-list-comprehension",level:3},{value:"<strong>Basic Example</strong>:",id:"basic-example",level:3},{value:"<strong>Using List Comprehension for Filtering</strong>:",id:"using-list-comprehension-for-filtering",level:3},{value:"<strong>Using List Comprehension for Mapping (Transforming)</strong>:",id:"using-list-comprehension-for-mapping-transforming",level:3},{value:"<strong>Combining Filtering and Mapping</strong>:",id:"combining-filtering-and-mapping",level:3},{value:"<strong>Nested List Comprehensions</strong>:",id:"nested-list-comprehensions",level:3},{value:"Tuples",id:"tuples",level:2},{value:"<strong>What is a Tuple?</strong>",id:"what-is-a-tuple",level:3},{value:"<strong>Key Properties</strong>:",id:"key-properties",level:3},{value:"<strong>Common Tuple Operations</strong>:",id:"common-tuple-operations",level:3},{value:"<strong>When to Use Tuples</strong>:",id:"when-to-use-tuples",level:3},{value:"String",id:"string",level:2},{value:"Notes:",id:"notes-1",level:4},{value:"Example Code",id:"example-code",level:4},{value:"Characters",id:"characters",level:3},{value:"Loops",id:"loops",level:2},{value:"Math",id:"math",level:2},{value:"Queue",id:"queue",level:2},{value:"<strong><code>deque</code> (Double-Ended Queue) in Python</strong>",id:"deque-double-ended-queue-in-python",level:3},{value:"<strong>Common Methods in <code>deque</code>:</strong>",id:"common-methods-in-deque",level:3},{value:"<strong>Example Initialisation:</strong>",id:"example-initialisation",level:3},{value:"<strong>Advantages over List</strong>:",id:"advantages-over-list",level:3},{value:"<strong>Disadvantages</strong>:",id:"disadvantages",level:3},{value:"Priority Queue",id:"priority-queue",level:2},{value:"Set and Map",id:"set-and-map",level:2},{value:"Sorting",id:"sorting",level:2},{value:"Sorting in Python",id:"sorting-in-python",level:3},{value:"<strong>Built-in Sorting Methods</strong>",id:"built-in-sorting-methods",level:4},{value:"<strong>Custom Sorting</strong>",id:"custom-sorting",level:4},{value:"<strong>Sorting with Multiple Keys</strong>",id:"sorting-with-multiple-keys",level:4},{value:"<strong>Sorting Dictionaries</strong>",id:"sorting-dictionaries",level:4},{value:"Examples of Custom Sorting with Complex Logic",id:"examples-of-custom-sorting-with-complex-logic",level:3},{value:"<strong>Sorting by Multiple Conditions</strong>",id:"sorting-by-multiple-conditions",level:4},{value:"<strong>Using a Custom Function as the Key</strong>",id:"using-a-custom-function-as-the-key",level:4},{value:"<strong>Handling Special Cases</strong>",id:"handling-special-cases",level:4},{value:"<strong>Ignoring Case or Custom Transformations</strong>",id:"ignoring-case-or-custom-transformations",level:4},{value:"<strong>Complex Derived Keys</strong>",id:"complex-derived-keys",level:4},{value:"Key Considerations",id:"key-considerations",level:3},{value:"Sorted Set and Sorted Map",id:"sorted-set-and-sorted-map",level:2},{value:"<strong>Overview</strong>",id:"overview",level:3},{value:"<strong>Initialization</strong>",id:"initialization",level:3},{value:"<strong>Key Methods in <code>SortedDict</code> and <code>SortedSet</code></strong>",id:"key-methods-in-sorteddict-and-sortedset",level:3},{value:"<strong>Examples with Detailed Explanations</strong>",id:"examples-with-detailed-explanations",level:3},{value:"<strong>1. Using <code>bisect_left</code> and <code>bisect_right</code></strong>",id:"1-using-bisect_left-and-bisect_right",level:4},{value:"<strong>2. Using <code>irange</code></strong>",id:"2-using-irange",level:4},{value:"Ordered Dict",id:"ordered-dict",level:2},{value:"<strong>Key Features</strong>:",id:"key-features",level:3},{value:"<strong>Example</strong>:",id:"example-1",level:3},{value:"Lambda function",id:"lambda-function",level:2},{value:"Lambda in Python",id:"lambda-in-python",level:3},{value:"Syntax:",id:"syntax-1",level:4},{value:"Key Features:",id:"key-features-1",level:4},{value:"Examples:",id:"examples-1",level:4},{value:"Limitations:",id:"limitations",level:4},{value:"Other important libraries",id:"other-important-libraries",level:2},{value:"<code>bisect</code> as a quick way to do binary search over sorted lists",id:"bisect-as-a-quick-way-to-do-binary-search-over-sorted-lists",level:3},{value:"Notes:",id:"notes-2",level:3}];function h(e){const n={annotation:"annotation",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",li:"li",math:"math",mn:"mn",mrow:"mrow",msup:"msup",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"python-knowledge-for-dsa",children:"Python knowledge for DSA"})}),"\n",(0,r.jsx)(n.h2,{id:"general",children:"General"}),"\n",(0,r.jsx)(n.h3,{id:"defining-classes-and-methods",children:"Defining classes and methods"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"defining-a-class",children:(0,r.jsx)(n.strong,{children:"Defining a Class"})}),"\n",(0,r.jsxs)(n.p,{children:["A class is defined using the ",(0,r.jsx)(n.code,{children:"class"})," keyword:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class MyClass:\n    # Class Attribute (shared by all instances)\n    class_attribute = "Shared value"\n\n    # Constructor (Initializer)\n    def __init__(self, attribute1, attribute2="default"):\n        self.attribute1 = attribute1  # Instance attribute\n        self.attribute2 = attribute2  # Instance attribute\n\n    # Instance Method\n    def instance_method(self):\n        return f"Attribute1 is {self.attribute1}"\n\n    # Class Method\n    @classmethod\n    def class_method(cls):\n        return f"Class Attribute is {cls.class_attribute}"\n\n    # Static Method\n    @staticmethod\n    def static_method():\n        return "Static methods are not tied to class or instance."\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"constructor-__init__",children:(0,r.jsxs)(n.strong,{children:["Constructor: ",(0,r.jsx)(n.code,{children:"__init__"})]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"__init__"})," method is called automatically when a new object is created. It initializes instance attributes."]}),"\n",(0,r.jsx)(n.h5,{id:"avoid-mutable-default-arguments",children:(0,r.jsx)(n.strong,{children:"Avoid Mutable Default Arguments"})}),"\n",(0,r.jsxs)(n.p,{children:["Default arguments in constructors should ",(0,r.jsx)(n.strong,{children:"not"})," be mutable (e.g., lists, dictionaries). This is because mutable objects\nare shared across instances, which can lead to unexpected behavior."]}),"\n",(0,r.jsx)(n.p,{children:"Example of incorrect usage:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Example:\n    def __init__(self, data=[]):  # Avoid mutable default arguments\n        self.data = data\n"})}),"\n",(0,r.jsx)(n.p,{children:"Correct usage:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Example:\n    def __init__(self, data=None):\n        self.data = data if data is not None else []\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"defining-methods",children:(0,r.jsx)(n.strong,{children:"Defining Methods"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Instance Methods"}),(0,r.jsx)(n.br,{}),"\n","Operate on an instance of the class. Access instance attributes using ",(0,r.jsx)(n.code,{children:"self"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def greet(self, name):\n    return f"Hello, {name}! This is {self.attribute1}"\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Class Methods"}),(0,r.jsx)(n.br,{}),"\n","Operate on the class itself, not specific instances. Use ",(0,r.jsx)(n.code,{children:"@classmethod"})," decorator and ",(0,r.jsx)(n.code,{children:"cls"})," as the first parameter."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"@classmethod\ndef change_class_attribute(cls, value):\n    cls.class_attribute = value\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Static Methods"}),(0,r.jsx)(n.br,{}),"\n","Do not access class or instance data. Use ",(0,r.jsx)(n.code,{children:"@staticmethod"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@staticmethod\ndef utility_function():\n    return "This is a utility function."\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"nested-classes-and-methods",children:(0,r.jsx)(n.strong,{children:"Nested Classes and Methods"})}),"\n",(0,r.jsx)(n.p,{children:"Nested classes and methods help organize code, particularly when certain logic is only relevant within a specific\ncontext."}),"\n",(0,r.jsx)(n.h5,{id:"nested-classes",children:(0,r.jsx)(n.strong,{children:"Nested Classes"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class OuterClass:\n    class InnerClass:\n        def inner_method(self):\n            return "Inner method in InnerClass"\n'})}),"\n",(0,r.jsx)(n.h5,{id:"nested-methods",children:(0,r.jsx)(n.strong,{children:"Nested Methods"})}),"\n",(0,r.jsx)(n.p,{children:"Methods can call helper functions defined within them:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class MyClass:\n    def complex_method(self):\n        def helper_function(value):\n            return value * 2\n\n        result = helper_function(10)\n        return f"Result is {result}"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"instantiating-and-using-a-class",children:(0,r.jsx)(n.strong,{children:"Instantiating and Using a Class"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Creating an instance\nobj = MyClass("Value1", attribute2="Value2")\n\n# Accessing attributes and methods\nprint(obj.instance_method())  # "Attribute1 is Value1"\nprint(MyClass.class_method())  # "Class Attribute is Shared value"\nprint(MyClass.static_method())  # "Static methods are not tied to class or instance."\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"key-takeaways",children:(0,r.jsx)(n.strong,{children:"Key Takeaways"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Define classes using ",(0,r.jsx)(n.code,{children:"class"})," keyword."]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"__init__"})," to initialize instance attributes."]}),"\n",(0,r.jsx)(n.li,{children:"Avoid mutable default arguments in constructors."}),"\n",(0,r.jsx)(n.li,{children:"Use instance, class, and static methods appropriately."}),"\n",(0,r.jsx)(n.li,{children:"Nest classes or methods for encapsulating related logic."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"conditions",children:"Conditions"}),"\n",(0,r.jsx)(n.h3,{id:"basic-conditional-statements",children:(0,r.jsx)(n.strong,{children:"Basic Conditional Statements"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"if"})}),": Executes a block of code if the condition is ",(0,r.jsx)(n.code,{children:"True"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"elif"})}),": Adds more conditions to an ",(0,r.jsx)(n.code,{children:"if"})," statement."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"else"})}),": Executes when no preceding conditions are ",(0,r.jsx)(n.code,{children:"True"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'x = 10\nif x > 5:\n    print("x is greater than 5")\nelif x == 5:\n    print("x is exactly 5")\nelse:\n    print("x is less than 5")\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"comparison-operators",children:(0,r.jsx)(n.strong,{children:"Comparison Operators"})}),"\n",(0,r.jsx)(n.p,{children:"Used to compare values:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"=="})," : Equal to"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"!="})," : Not equal to"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<"}),", ",(0,r.jsx)(n.code,{children:">"}),", ",(0,r.jsx)(n.code,{children:"<="}),", ",(0,r.jsx)(n.code,{children:">="})," : Less than, greater than, etc."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"logical-operators",children:(0,r.jsx)(n.strong,{children:"Logical Operators"})}),"\n",(0,r.jsx)(n.p,{children:"Combine conditions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"and"})}),": Both conditions must be ",(0,r.jsx)(n.code,{children:"True"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"or"})}),": At least one condition must be ",(0,r.jsx)(n.code,{children:"True"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"not"})}),": Negates a condition."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'x = 7\nif x > 5 and x < 10:\n    print("x is between 5 and 10")\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"membership-operators",children:(0,r.jsx)(n.strong,{children:"Membership Operators"})}),"\n",(0,r.jsx)(n.p,{children:"Check for membership:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"in"}),": Checks if a value exists in a sequence."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"not in"}),": Checks if a value does not exist in a sequence."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'fruits = ["apple", "banana", "cherry"]\nif "apple" in fruits:\n    print("Apple is in the list!")\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"ternary-conditions",children:(0,r.jsx)(n.strong,{children:"Ternary Conditions"})}),"\n",(0,r.jsxs)(n.p,{children:["A concise way to write ",(0,r.jsx)(n.code,{children:"if-else"})," in a single line:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'x = 10\nresult = "Positive" if x > 0 else "Non-positive"\nprint(result)\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"list",children:"List"}),"\n",(0,r.jsx)(n.h3,{id:"array-slicing",children:"Array Slicing"}),"\n",(0,r.jsx)(n.p,{children:"Array slicing is a powerful way to access subsets of elements in sequences like lists, strings, and tuples. Here's how it works:"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"syntax",children:(0,r.jsx)(n.strong,{children:"Syntax"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"sequence[start:stop:step]\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"start"})}),": Index to begin slicing (inclusive). Defaults to ",(0,r.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"stop"})}),": Index to end slicing (exclusive). Defaults to the sequence's length."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"step"})}),": Interval between elements. Defaults to ",(0,r.jsx)(n.code,{children:"1"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"examples",children:(0,r.jsx)(n.strong,{children:"Examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"arr = [0, 1, 2, 3, 4, 5]\n\n# Basic Slicing\nprint(arr[1:4])      # Output: [1, 2, 3]\n\n# Skipping Elements\nprint(arr[::2])      # Output: [0, 2, 4]\n\n# Reverse Slicing\nprint(arr[::-1])     # Output: [5, 4, 3, 2, 1, 0]\n\n# Omitting Start/Stop\nprint(arr[:3])       # Output: [0, 1, 2]\nprint(arr[3:])       # Output: [3, 4, 5]\n\n# Negative Indices\nprint(arr[-3:])      # Output: [3, 4, 5]\n\n# Out-of-Range Indices\nprint(arr[1:10])     # Output: [1, 2, 3, 4, 5]\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"tips",children:[(0,r.jsx)(n.strong,{children:"Tips"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Slicing creates a ",(0,r.jsx)(n.strong,{children:"shallow copy"}),", not a reference."]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"step"})," for custom intervals or reversed slices."]}),"\n",(0,r.jsx)(n.li,{children:"Out-of-range indices are handled gracefully."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"using-as-a-stack",children:"Using as a stack"}),"\n",(0,r.jsx)(n.p,{children:"In Python, lists can be efficiently used as a stack (LIFO: Last In, First Out) with the following operations:"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"operations",children:[(0,r.jsx)(n.strong,{children:"Operations"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Push"}),": Add an element to the stack using ",(0,r.jsx)(n.code,{children:"append()"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pop"}),": Remove and return the top element using ",(0,r.jsx)(n.code,{children:"pop()"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Peek"}),": Access the top element without removing it using indexing."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"example",children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"stack = []\n\n# Push elements onto the stack\nstack.append(10)  # Stack: [10]\nstack.append(20)  # Stack: [10, 20]\nstack.append(30)  # Stack: [10, 20, 30]\n\n# Pop the top element\ntop = stack.pop()  # Returns 30, Stack: [10, 20]\n\n# Peek the top element\nprint(stack[-1])    # Output: 20 (top of the stack)\n\n# Check if stack is empty\nprint(len(stack) == 0)  # Output: False\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"notes",children:[(0,r.jsx)(n.strong,{children:"Notes"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Push"}),": ",(0,r.jsx)(n.code,{children:"O(1)"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pop"}),": ",(0,r.jsx)(n.code,{children:"O(1)"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Peek"}),": ",(0,r.jsx)(n.code,{children:"O(1)"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"zipping-lists",children:"Zipping lists"}),"\n",(0,r.jsx)(n.p,{children:"We can zip multiple lists to create a common iterable."}),"\n",(0,r.jsxs)(n.h4,{id:"example-1-basic-usage-of-zip-with-equal-lists",children:["Example 1: Basic Usage of ",(0,r.jsx)(n.code,{children:"zip()"})," with Equal Lists"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Two lists of equal length\nlist1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']\n\n# Zipping the lists together\nzipped = list(zip(list1, list2))\n\nprint(zipped)  # Output: [(1, 'a'), (2, 'b'), (3, 'c')]\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"example-2-zip-with-unequal-length-lists",children:["Example 2: ",(0,r.jsx)(n.code,{children:"zip()"})," with Unequal Length Lists"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Two lists of unequal length\nlist1 = [1, 2, 3]\nlist2 = ['a', 'b']\n\n# Zipping the lists together\nzipped = list(zip(list1, list2))\n\nprint(zipped)  # Output: [(1, 'a'), (2, 'b')]\n"})}),"\n",(0,r.jsx)(n.h4,{id:"note",children:"Note"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Equal Length"}),": When the lists have equal lengths, ",(0,r.jsx)(n.code,{children:"zip()"})," pairs the corresponding elements from each list."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Unequal Length"}),": When the lists have unequal lengths, ",(0,r.jsx)(n.code,{children:"zip()"})," stops when the shortest list is exhausted. It does\nnot raise an error or fill in missing values (like ",(0,r.jsx)(n.code,{children:"None"}),"), but simply stops at the end of the shortest list."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Important!"}),":",(0,r.jsx)(n.code,{children:"zip"})," does not create another list. So, we cannot use things like ",(0,r.jsx)(n.code,{children:"zip(list1, list2)[i]"})," or\n",(0,r.jsx)(n.code,{children:"len(zip(list1, list2))"})," on it's output. Thus, the above examples are creating a new list out of zip's output."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"list-comprehension",children:"List comprehension"}),"\n",(0,r.jsx)(n.p,{children:"List comprehension is a concise way to create lists in Python. It's a powerful tool for filtering, transforming, or constructing new lists from existing ones."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"syntax-of-list-comprehension",children:[(0,r.jsx)(n.strong,{children:"Syntax of List Comprehension"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"[expression for item in iterable if condition]\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"expression"})}),": The value to add to the new list."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"item"})}),": The variable representing each element in the iterable."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"iterable"})}),": A sequence (like a list, range, etc.)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"condition"})}),": An optional filter to include only items that satisfy the condition."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"basic-example",children:[(0,r.jsx)(n.strong,{children:"Basic Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Create a list of squares\nsquares = [x**2 for x in range(5)]  \nprint(squares)  # Output: [0, 1, 4, 9, 16]\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"using-list-comprehension-for-filtering",children:[(0,r.jsx)(n.strong,{children:"Using List Comprehension for Filtering"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"You can filter elements by adding a condition to the comprehension."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Get even numbers from a list\nnumbers = [1, 2, 3, 4, 5, 6]\nevens = [x for x in numbers if x % 2 == 0]\nprint(evens)  # Output: [2, 4, 6]\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"using-list-comprehension-for-mapping-transforming",children:[(0,r.jsx)(n.strong,{children:"Using List Comprehension for Mapping (Transforming)"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"You can apply a transformation to each item in a list."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Square each number in the list\nnumbers = [1, 2, 3, 4]\nsquared = [x**2 for x in numbers]\nprint(squared)  # Output: [1, 4, 9, 16]\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"combining-filtering-and-mapping",children:[(0,r.jsx)(n.strong,{children:"Combining Filtering and Mapping"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"You can filter and transform in one step."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Get the squares of even numbers only\nnumbers = [1, 2, 3, 4, 5, 6]\neven_squares = [x**2 for x in numbers if x % 2 == 0]\nprint(even_squares)  # Output: [4, 16, 36]\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"nested-list-comprehensions",children:[(0,r.jsx)(n.strong,{children:"Nested List Comprehensions"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"List comprehensions can also be nested to process multi-dimensional data."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Flatten a 2D list\nmatrix = [[1, 2], [3, 4], [5, 6]]\nflattened = [item for sublist in matrix for item in sublist]\nprint(flattened)  # Output: [1, 2, 3, 4, 5, 6]\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"tuples",children:"Tuples"}),"\n",(0,r.jsx)(n.p,{children:"Tuples are one of the core data structures in Python, offering an immutable and ordered collection of elements."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"what-is-a-tuple",children:(0,r.jsx)(n.strong,{children:"What is a Tuple?"})}),"\n",(0,r.jsxs)(n.p,{children:["A tuple is a sequence of values that can be of any type, but once created, it cannot be modified (immutable). It is defined using parentheses ",(0,r.jsx)(n.code,{children:"()"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"my_tuple = (1, 2, 3)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"key-properties",children:[(0,r.jsx)(n.strong,{children:"Key Properties"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Immutable"}),": Once created, you cannot add, remove, or change elements in a tuple."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# my_tuple[0] = 10  # This would raise an error\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Ordered"}),": The order of elements is preserved."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"my_tuple = (10, 20, 30)\nprint(my_tuple[1])  # Output: 20\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Supports Multiple Data Types"}),":\nTuples can store elements of different data types."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'mixed_tuple = (1, "hello", 3.14)\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Can Contain Nested Tuples"}),":\nYou can have tuples inside other tuples."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"nested_tuple = ((1, 2), (3, 4))\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"common-tuple-operations",children:[(0,r.jsx)(n.strong,{children:"Common Tuple Operations"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Accessing Elements"}),": Use indexing to retrieve values."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"my_tuple = (1, 2, 3)\nprint(my_tuple[0])  # Output: 1\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Concatenation"}),": Combine tuples."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"tuple1 = (1, 2)\ntuple2 = (3, 4)\nprint(tuple1 + tuple2)  # Output: (1, 2, 3, 4)\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Repetition"}),": Repeat elements in a tuple."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"tuple3 = (1, 2)\nprint(tuple3 * 3)  # Output: (1, 2, 1, 2, 1, 2)\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"when-to-use-tuples",children:[(0,r.jsx)(n.strong,{children:"When to Use Tuples"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Immutability"}),": When you need a collection of data that should not change."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance"}),": Tuples are slightly faster than lists due to their immutability."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Hashable"}),": Tuples can be used as keys in dictionaries, unlike lists."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"string",children:"String"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Method"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Description"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Example"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Output"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.lower()"})}),(0,r.jsx)(n.td,{children:"Converts all characters to lowercase."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"Hello".lower()'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'hello'"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.upper()"})}),(0,r.jsx)(n.td,{children:"Converts all characters to uppercase."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"Hello".upper()'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'HELLO'"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.strip([chars])"})}),(0,r.jsx)(n.td,{children:"Removes leading and trailing characters (default: whitespace)."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"  hello  ".strip()'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'hello'"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.find(sub)"})}),(0,r.jsxs)(n.td,{children:["Returns the index of the first occurrence of ",(0,r.jsx)(n.code,{children:"sub"}),", or ",(0,r.jsx)(n.code,{children:"-1"})," if not found."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"hello".find("e")'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"1"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.index(sub)"})}),(0,r.jsxs)(n.td,{children:["Like ",(0,r.jsx)(n.code,{children:"find()"}),", but raises ",(0,r.jsx)(n.code,{children:"ValueError"})," if ",(0,r.jsx)(n.code,{children:"sub"})," is not found."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"hello".index("e")'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"1"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.count(sub)"})}),(0,r.jsxs)(n.td,{children:["Counts the occurrences of ",(0,r.jsx)(n.code,{children:"sub"})," in the string."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"hello".count("l")'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"2"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.replace(old, new)"})}),(0,r.jsxs)(n.td,{children:["Replaces all occurrences of ",(0,r.jsx)(n.code,{children:"old"})," with ",(0,r.jsx)(n.code,{children:"new"}),"."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"hello".replace("l", "p")'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'heppo'"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.split([sep])"})}),(0,r.jsxs)(n.td,{children:["Splits the string into a list using ",(0,r.jsx)(n.code,{children:"sep"})," (default: whitespace)."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"a,b,c".split(",")'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"['a', 'b', 'c']"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.join(iterable)"})}),(0,r.jsx)(n.td,{children:"Joins elements of an iterable with the string as a separator."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'" ".join(["hello", "world"])'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'hello world'"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.startswith(prefix)"})}),(0,r.jsxs)(n.td,{children:["Returns ",(0,r.jsx)(n.code,{children:"True"})," if the string starts with the specified prefix."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"hello".startswith("he")'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"True"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.endswith(suffix)"})}),(0,r.jsxs)(n.td,{children:["Returns ",(0,r.jsx)(n.code,{children:"True"})," if the string ends with the specified suffix."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"hello".endswith("lo")'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"True"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.isdigit()"})}),(0,r.jsxs)(n.td,{children:["Returns ",(0,r.jsx)(n.code,{children:"True"})," if all characters are digits."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"123".isdigit()'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"True"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.isalpha()"})}),(0,r.jsxs)(n.td,{children:["Returns ",(0,r.jsx)(n.code,{children:"True"})," if all characters are alphabetic."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"abc".isalpha()'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"True"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.isalnum()"})}),(0,r.jsxs)(n.td,{children:["Returns ",(0,r.jsx)(n.code,{children:"True"})," if all characters are alphanumeric."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"abc123".isalnum()'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"True"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.partition(sep)"})}),(0,r.jsxs)(n.td,{children:["Splits the string into a 3-tuple: before ",(0,r.jsx)(n.code,{children:"sep"}),", ",(0,r.jsx)(n.code,{children:"sep"}),", and after ",(0,r.jsx)(n.code,{children:"sep"}),"."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"key=value".partition("=")'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"('key', '=', 'value')"})})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"Some string methods in Python allow specifying indices or ranges to narrow down their operation."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Method"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Description"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Example"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Output"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.startswith(prefix, start, end)"})}),(0,r.jsxs)(n.td,{children:["Checks if the string starts with ",(0,r.jsx)(n.code,{children:"prefix"})," within the range ",(0,r.jsx)(n.code,{children:"[start:end]"}),"."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"hello".startswith("e", 1, 4)'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"True"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.endswith(suffix, start, end)"})}),(0,r.jsxs)(n.td,{children:["Checks if the string ends with ",(0,r.jsx)(n.code,{children:"suffix"})," within the range ",(0,r.jsx)(n.code,{children:"[start:end]"}),"."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"hello".endswith("l", 0, 3)'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"True"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.find(sub, start, end)"})}),(0,r.jsxs)(n.td,{children:["Returns the lowest index of ",(0,r.jsx)(n.code,{children:"sub"})," within the range ",(0,r.jsx)(n.code,{children:"[start:end]"}),", or ",(0,r.jsx)(n.code,{children:"-1"})," if not found."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"hello".find("l", 3, 5)'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"3"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.index(sub, start, end)"})}),(0,r.jsxs)(n.td,{children:["Like ",(0,r.jsx)(n.code,{children:"find()"}),", but raises a ",(0,r.jsx)(n.code,{children:"ValueError"})," if ",(0,r.jsx)(n.code,{children:"sub"})," is not found within the range ",(0,r.jsx)(n.code,{children:"[start:end]"}),"."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"hello".index("l", 3, 5)'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"3"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str.count(sub, start, end)"})}),(0,r.jsxs)(n.td,{children:["Counts occurrences of ",(0,r.jsx)(n.code,{children:"sub"})," within the range ",(0,r.jsx)(n.code,{children:"[start:end]"}),"."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"hello".count("l", 0, 4)'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"2"})})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"notes-1",children:"Notes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Indices"}),": Both ",(0,r.jsx)(n.code,{children:"start"})," and ",(0,r.jsx)(n.code,{children:"end"})," are optional. If omitted, the method considers the entire string."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ranges"}),": The ",(0,r.jsx)(n.code,{children:"end"})," index is exclusive, meaning the range considered is ",(0,r.jsx)(n.code,{children:"[start, end)"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-code",children:"Example Code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'text = "hello world"\nprint(text.startswith("lo", 3))  # True: "lo" starts at index 3\nprint(text.endswith("lo", 0, 5))  # True: "lo" is in range [0, 5)\nprint(text.find("o", 5))  # 7: "o" first appears at index 7 starting from index 5\nprint(text.count("l", 2, 8))  # 2: "l" appears twice in range [2, 8)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["These are especially useful for ",(0,r.jsx)(n.strong,{children:"substring checks"})," and ",(0,r.jsx)(n.strong,{children:"search operations"})," constrained to specific parts of a\nstring."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"characters",children:"Characters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A character in a string can be checked for being a digit via:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"for letter in s:\n    if letter.isdigit():\n# Do something\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A character can be converted to and integer by ",(0,r.jsx)(n.code,{children:"ord('a')"}),". It can be converted back to character by using\n",(0,r.jsx)(n.code,{children:"chr()"}),". ",(0,r.jsx)("br",{})," ",(0,r.jsx)(n.strong,{children:"Example:"})," ",(0,r.jsx)(n.code,{children:"letter = chr(ord('a') + 2)"}),". In this the ",(0,r.jsx)(n.code,{children:"letter"})," would be 'c' `"]}),"\n",(0,r.jsxs)(n.li,{children:["A list can be reversed in python via ",(0,r.jsx)(n.code,{children:"reversed(list)"})," method (but it needs to be converted back to list via ",(0,r.jsx)(n.code,{children:"list()"}),"\nif needed for more than iteration. Array slicing (in later section) is another way to do\nthat."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"loops",children:"Loops"}),"\n",(0,r.jsx)(n.h2,{id:"math",children:"Math"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"pow()"})," to calculate powers. ",(0,r.jsx)("br",{})," ",(0,r.jsx)(n.strong,{children:"Example:"})," ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsx)(n.mrow,{children:(0,r.jsxs)(n.msup,{children:[(0,r.jsx)(n.mn,{children:"2"}),(0,r.jsx)(n.mn,{children:"8"})]})}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"2^8"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.8141em"}}),(0,r.jsxs)(n.span,{className:"mord",children:[(0,r.jsx)(n.span,{className:"mord",children:"2"}),(0,r.jsx)(n.span,{className:"msupsub",children:(0,r.jsx)(n.span,{className:"vlist-t",children:(0,r.jsx)(n.span,{className:"vlist-r",children:(0,r.jsx)(n.span,{className:"vlist",style:{height:"0.8141em"},children:(0,r.jsxs)(n.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,r.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,r.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,r.jsx)(n.span,{className:"mord mtight",children:"8"})})]})})})})})]})]})})]})," can be calculated by ",(0,r.jsx)(n.code,{children:"pow(2,8)"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"math.inf"})," and ",(0,r.jsx)(n.code,{children:"-math.inf"})," can be used when large negative or positive numbers are needed for initialisation."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"max()"})," and ",(0,r.jsx)(n.code,{children:"min()"})," can be used to find the maximum and minimum of the elements. Works both with individual items like\n",(0,r.jsx)(n.code,{children:"max(item1, item2)"})," or over list like ",(0,r.jsx)(n.code,{children:"max(list)"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sum()"})," can be used to calculate sum of the input arguments (list or elements)."]}),"\n",(0,r.jsxs)(n.li,{children:["To find a ",(0,r.jsx)(n.strong,{children:"random number"})," we can use: ",(0,r.jsx)("br",{})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import random\n\n# Random float between 0.0 and 1.0\nprint(random.random())\n\n# Random integer between 1 and 10 inclusive\nprint(random.randint(1, 10))\n\n# Random float between 5.5 and 9.5\nprint(random.uniform(5.5, 9.5))\n\n# Random element from a list\nprint(random.choice(['apple', 'banana', 'cherry']))\n\n# Random 2 unique elements from a list\nprint(random.sample([10, 20, 30, 40], 2))\n\n# Shuffle a list\nmy_list = [1, 2, 3, 4]\nrandom.shuffle(my_list)\nprint(my_list)\n\n"})}),"\n",(0,r.jsx)(n.h2,{id:"queue",children:"Queue"}),"\n",(0,r.jsx)(n.h3,{id:"deque-double-ended-queue-in-python",children:(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"deque"})," (Double-Ended Queue) in Python"]})}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.code,{children:"deque"})," is a ",(0,r.jsx)(n.strong,{children:"double-ended queue"})," provided by the ",(0,r.jsx)(n.code,{children:"collections"})," module in Python. It allows fast appends and pops\nfrom both ends of the queue, which makes it ideal for use cases that require efficient queue operations."]}),"\n",(0,r.jsx)(n.h3,{id:"common-methods-in-deque",children:(0,r.jsxs)(n.strong,{children:["Common Methods in ",(0,r.jsx)(n.code,{children:"deque"}),":"]})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Method"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Description"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Example"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"append(x)"})}),(0,r.jsxs)(n.td,{children:["Adds an element ",(0,r.jsx)(n.code,{children:"x"})," to the right side of the deque."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"d.append(1)"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"appendleft(x)"})}),(0,r.jsxs)(n.td,{children:["Adds an element ",(0,r.jsx)(n.code,{children:"x"})," to the left side of the deque."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"d.appendleft(2)"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pop()"})}),(0,r.jsx)(n.td,{children:"Removes and returns an element from the right side of the deque."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"d.pop()"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"popleft()"})}),(0,r.jsx)(n.td,{children:"Removes and returns an element from the left side of the deque."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"d.popleft()"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"extend(iterable)"})}),(0,r.jsx)(n.td,{children:"Adds all elements of an iterable to the right side of the deque."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"d.extend([3, 4, 5])"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"extendleft(iterable)"})}),(0,r.jsx)(n.td,{children:"Adds all elements of an iterable to the left side of the deque (in reverse order)."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"d.extendleft([1, 2])"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rotate(n)"})}),(0,r.jsxs)(n.td,{children:["Rotates the deque ",(0,r.jsx)(n.code,{children:"n"})," steps to the right. If ",(0,r.jsx)(n.code,{children:"n"})," is negative, rotates left."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"d.rotate(1)"})})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"example-initialisation",children:(0,r.jsx)(n.strong,{children:"Example Initialisation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from collections import deque\n\n# Create an empty deque\nd = deque()\n\n# Create q with some elements. Note that it only takes in a list type in the constructor.\nd = deque([1, 2, 3])\n# Create q with even numbers.\nd = deque(x for x in range(n) if x % 2 = 0)\n\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"advantages-over-list",children:[(0,r.jsx)(n.strong,{children:"Advantages over List"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Efficiency"}),": ",(0,r.jsx)(n.code,{children:"deque"})," operations for adding/removing elements from both ends are faster compared to lists."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"No Shifting"}),": Unlike lists, where elements might need to be shifted when performing operations like ",(0,r.jsx)(n.code,{children:"pop(0)"}),",\n",(0,r.jsx)(n.code,{children:"deque"})," does not have this overhead."]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"disadvantages",children:[(0,r.jsx)(n.strong,{children:"Disadvantages"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Access by Index"}),": ",(0,r.jsx)(n.code,{children:"deque"})," does not support efficient access by index (",(0,r.jsx)(n.code,{children:"O(n)"}),"), whereas lists provide ",(0,r.jsx)(n.code,{children:"O(1)"})," time\nfor indexing. Therefore, ",(0,r.jsx)(n.code,{children:"deque"})," is best suited for operations where elements are added/removed from ends."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"priority-queue",children:"Priority Queue"}),"\n",(0,r.jsx)(n.h2,{id:"set-and-map",children:"Set and Map"}),"\n",(0,r.jsx)(n.h2,{id:"sorting",children:"Sorting"}),"\n",(0,r.jsx)(n.h3,{id:"sorting-in-python",children:"Sorting in Python"}),"\n",(0,r.jsx)(n.p,{children:"Python provides powerful and flexible tools for sorting data. Sorting can be performed on lists and other iterable\nobjects, with support for custom orderings and stable sorting (preserving the relative order of equal elements)."}),"\n",(0,r.jsx)(n.h4,{id:"built-in-sorting-methods",children:(0,r.jsx)(n.strong,{children:"Built-in Sorting Methods"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"sorted()"})}),": Returns a new sorted list from an iterable."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:".sort()"})}),": Sorts a list in place."]}),"\n"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Function"}),(0,r.jsx)(n.th,{children:"Example"}),(0,r.jsx)(n.th,{children:"Output"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"sorted"})})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sorted([3, 1, 2])"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"[1, 2, 3]"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:".sort"})})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"arr = [3, 1, 2]; arr.sort()"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"arr \u2192 [1, 2, 3]"})})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"custom-sorting",children:(0,r.jsx)(n.strong,{children:"Custom Sorting"})}),"\n",(0,r.jsxs)(n.p,{children:["Both ",(0,r.jsx)(n.code,{children:"sorted()"})," and ",(0,r.jsx)(n.code,{children:".sort()"})," support a ",(0,r.jsx)(n.code,{children:"key"})," parameter for custom sorting logic."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Example"}),(0,r.jsx)(n.th,{children:"Code"}),(0,r.jsx)(n.th,{children:"Output"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Sort by Length"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sorted(['cat', 'zebra', 'dog'], key=len)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"['cat', 'dog', 'zebra']"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Sort by Absolute Value"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sorted([-3, -1, 2], key=abs)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"[ -1, 2, -3]"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Descending Order"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sorted([3, 1, 2], reverse=True)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"[3, 2, 1]"})})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"sorting-with-multiple-keys",children:(0,r.jsx)(n.strong,{children:"Sorting with Multiple Keys"})}),"\n",(0,r.jsxs)(n.p,{children:["To sort using multiple criteria, combine logic in the ",(0,r.jsx)(n.code,{children:"key"})," function."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"data = [('John', 25), ('Alice', 30), ('John', 20)]\nsorted(data, key=lambda x: (x[0], -x[1]))\n# Output: [('John', 25), ('John', 20), ('Alice', 30)]\n"})}),"\n",(0,r.jsx)(n.h4,{id:"sorting-dictionaries",children:(0,r.jsx)(n.strong,{children:"Sorting Dictionaries"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"By Keys"}),":","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"sorted({'b': 2, 'a': 1})\n# Output: ['a', 'b']\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"By Values"}),":","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"sorted({'b': 2, 'a': 1}.items(), key=lambda x: x[1])\n# Output: [('a', 1), ('b', 2)]\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Yes, more complex logic can be passed into Python's ",(0,r.jsx)(n.code,{children:"sorted()"})," or ",(0,r.jsx)(n.code,{children:".sort()"})," by using the ",(0,r.jsx)(n.code,{children:"key"})," parameter with a\ncallable, such as a ",(0,r.jsx)(n.code,{children:"lambda"}),' or a function. The key function is used to generate a "sort key" for each element, and you\ncan define this logic to be as complex as needed.']}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"examples-of-custom-sorting-with-complex-logic",children:"Examples of Custom Sorting with Complex Logic"}),"\n",(0,r.jsx)(n.h4,{id:"sorting-by-multiple-conditions",children:(0,r.jsx)(n.strong,{children:"Sorting by Multiple Conditions"})}),"\n",(0,r.jsx)(n.p,{children:"You can combine multiple criteria in the key function:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"data = [('Alice', 30, 50000), ('Bob', 25, 60000), ('Alice', 25, 55000)]\n# Sort by name, then by age, and then by salary descending\nsorted_data = sorted(data, key=lambda x: (x[0], x[1], -x[2]))\nprint(sorted_data)\n# Output: [('Alice', 25, 55000), ('Alice', 30, 50000), ('Bob', 25, 60000)]\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"using-a-custom-function-as-the-key",children:(0,r.jsx)(n.strong,{children:"Using a Custom Function as the Key"})}),"\n",(0,r.jsxs)(n.p,{children:["For more complex logic, define a separate function instead of a ",(0,r.jsx)(n.code,{children:"lambda"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def custom_key(item):\n    name, age, salary = item\n    return (name, -salary if name == 'Alice' else salary)\n\n\ndata = [('Alice', 30, 50000), ('Bob', 25, 60000), ('Alice', 25, 55000)]\nsorted_data = sorted(data, key=custom_key)\nprint(sorted_data)\n# Output: [('Alice', 25, 55000), ('Alice', 30, 50000), ('Bob', 25, 60000)]\n"})}),"\n",(0,r.jsx)(n.h4,{id:"handling-special-cases",children:(0,r.jsx)(n.strong,{children:"Handling Special Cases"})}),"\n",(0,r.jsxs)(n.p,{children:["You can include conditional logic in the ",(0,r.jsx)(n.code,{children:"key"})," function:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"words = ['banana', 'apple', 'cherry', 'blueberry']\n# Sort by length, then alphabetically if lengths are equal\nsorted_words = sorted(words, key=lambda x: (len(x), x))\nprint(sorted_words)\n# Output: ['apple', 'banana', 'cherry', 'blueberry']\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"ignoring-case-or-custom-transformations",children:(0,r.jsx)(n.strong,{children:"Ignoring Case or Custom Transformations"})}),"\n",(0,r.jsx)(n.p,{children:"You can preprocess elements before sorting:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"strings = ['Apple', 'banana', 'Cherry', 'apple']\n# Case-insensitive sorting\nsorted_strings = sorted(strings, key=lambda x: x.lower())\nprint(sorted_strings)\n# Output: ['Apple', 'apple', 'banana', 'Cherry']\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"complex-derived-keys",children:(0,r.jsx)(n.strong,{children:"Complex Derived Keys"})}),"\n",(0,r.jsx)(n.p,{children:"Generate complex keys dynamically:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"products = [{'name': 'A', 'price': 100, 'rating': 4.5},\n            {'name': 'B', 'price': 50, 'rating': 4.7},\n            {'name': 'C', 'price': 150, 'rating': 4.2}]\n\n# Sort by highest rating, then lowest price\nsorted_products = sorted(products, key=lambda p: (-p['rating'], p['price']))\nprint(sorted_products)\n# Output: [{'name': 'B', 'price': 50, 'rating': 4.7},\n#          {'name': 'A', 'price': 100, 'rating': 4.5},\n#          {'name': 'C', 'price': 150, 'rating': 4.2}]\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"key-considerations",children:"Key Considerations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Efficiency"}),": The ",(0,r.jsx)(n.code,{children:"key"})," function is called once per element, so complex logic may impact performance for large\ndatasets."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Stable Sorting"}),": Python's sort is stable, meaning elements with equal keys will retain their relative order in the\noriginal list."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["By leveraging custom functions and complex logic, you can implement virtually any sorting behavior with Python's\n",(0,r.jsx)(n.code,{children:"sorted()"})," and ",(0,r.jsx)(n.code,{children:".sort()"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"sorted-set-and-sorted-map",children:"Sorted Set and Sorted Map"}),"\n",(0,r.jsx)(n.p,{children:"These structures can be used when sorted dict or set is required."}),"\n",(0,r.jsx)(n.h3,{id:"overview",children:(0,r.jsx)(n.strong,{children:"Overview"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Structure"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Description"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"SortedDict"})})}),(0,r.jsx)(n.td,{children:"A dictionary that maintains its keys in sorted order. Useful when you need sorted access to keys, efficient range queries, and ordering operations."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"SortedSet"})})}),(0,r.jsx)(n.td,{children:"A set that maintains its elements in sorted order. Allows for efficient insertion, deletion, and access while preserving order."})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"initialization",children:(0,r.jsx)(n.strong,{children:"Initialization"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Structure"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Initialization Example"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"SortedDict"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"from sortedcontainers import SortedDict"}),(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:'sorted_dict = SortedDict({5: "five", 1: "one", 3: "three"})'}),(0,r.jsx)("br",{}),"Automatically sorts keys: ",(0,r.jsx)(n.code,{children:'{1: "one", 3: "three", 5: "five"}'})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"SortedSet"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"from sortedcontainers import SortedSet"}),(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"sorted_set = SortedSet([5, 1, 3, 1])"}),(0,r.jsx)("br",{}),"Automatically sorts and removes duplicates: ",(0,r.jsx)(n.code,{children:"[1, 3, 5]"})]})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"key-methods-in-sorteddict-and-sortedset",children:(0,r.jsxs)(n.strong,{children:["Key Methods in ",(0,r.jsx)(n.code,{children:"SortedDict"})," and ",(0,r.jsx)(n.code,{children:"SortedSet"})]})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Method"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Description"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Example"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"keys()"})})}),(0,r.jsxs)(n.td,{children:["Returns a ",(0,r.jsx)(n.code,{children:"SortedKeysView"})," of all the keys in sorted order."]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"sorted_dict.keys()"})," \u2192 ",(0,r.jsx)(n.code,{children:"SortedKeysView([1, 3, 5])"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"values()"})})}),(0,r.jsxs)(n.td,{children:["Returns a ",(0,r.jsx)(n.code,{children:"SortedValuesView"})," of all the values in the dictionary."]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"sorted_dict.values()"})," \u2192 ",(0,r.jsx)(n.code,{children:'SortedValuesView(["one", "three", "five"])'})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"items()"})})}),(0,r.jsxs)(n.td,{children:["Returns a ",(0,r.jsx)(n.code,{children:"SortedItemsView"})," of key-value pairs in sorted order."]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"sorted_dict.items()"})," \u2192 ",(0,r.jsx)(n.code,{children:'SortedItemsView([(1, "one"), (3, "three"), (5, "five")])'})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"add(value)"})})," ",(0,r.jsx)(n.em,{children:"(SortedSet only)"})]}),(0,r.jsx)(n.td,{children:"Adds an element to the set while maintaining sorted order."}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"sorted_set.add(4)"}),(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"sorted_set"})," \u2192 ",(0,r.jsx)(n.code,{children:"[1, 3, 4, 5]"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"discard(value)"})})}),(0,r.jsx)(n.td,{children:"Removes an element from the set if it exists; does nothing otherwise."}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"sorted_set.discard(3)"}),(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"sorted_set"})," \u2192 ",(0,r.jsx)(n.code,{children:"[1, 5]"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"bisect_left(key)"})})}),(0,r.jsxs)(n.td,{children:["Returns the index where ",(0,r.jsx)(n.code,{children:"key"})," would fit in the sorted order, keeping duplicates on the ",(0,r.jsx)(n.strong,{children:"right"}),"."]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"sorted_dict.bisect_left(3)"})," \u2192 ",(0,r.jsx)(n.code,{children:"1"}),(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"sorted_set.bisect_left(4)"})," \u2192 ",(0,r.jsx)(n.code,{children:"2"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"bisect_right(key)"})})}),(0,r.jsxs)(n.td,{children:["Returns the index where ",(0,r.jsx)(n.code,{children:"key"})," would fit in the sorted order, keeping duplicates on the ",(0,r.jsx)(n.strong,{children:"left"}),"."]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"sorted_dict.bisect_right(3)"})," \u2192 ",(0,r.jsx)(n.code,{children:"2"}),(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"sorted_set.bisect_right(4)"})," \u2192 ",(0,r.jsx)(n.code,{children:"3"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"irange(start, end)"})})}),(0,r.jsxs)(n.td,{children:["Returns an iterator over the range of keys (or values for ",(0,r.jsx)(n.code,{children:"SortedSet"}),") between ",(0,r.jsx)(n.code,{children:"start"})," and ",(0,r.jsx)(n.code,{children:"end"})," (inclusive or exclusive)."]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"sorted_dict.irange(2, 4)"})," \u2192 ",(0,r.jsx)(n.code,{children:"[3]"}),(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"sorted_set.irange(2, 4, inclusive=(True, False))"})," \u2192 ",(0,r.jsx)(n.code,{children:"[3]"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"peekitem(index)"})})," ",(0,r.jsx)(n.em,{children:"(SortedDict only)"})]}),(0,r.jsx)(n.td,{children:"Returns the key-value pair at the specified index."}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"sorted_dict.peekitem(0)"})," \u2192 ",(0,r.jsx)(n.code,{children:'(1, "one")'})]})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"examples-with-detailed-explanations",children:(0,r.jsx)(n.strong,{children:"Examples with Detailed Explanations"})}),"\n",(0,r.jsx)(n.h4,{id:"1-using-bisect_left-and-bisect_right",children:(0,r.jsxs)(n.strong,{children:["1. Using ",(0,r.jsx)(n.code,{children:"bisect_left"})," and ",(0,r.jsx)(n.code,{children:"bisect_right"})]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Goal"}),": Find where to insert a new key or element while maintaining sorted order."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["For ",(0,r.jsx)(n.code,{children:"SortedDict"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sortedcontainers import SortedDict\n\nsorted_dict = SortedDict({1: "one", 3: "three", 5: "five"})\n\n# Index to insert key 4 (keeping keys sorted)\nindex_left = sorted_dict.bisect_left(4)  # Finds position >= 4\nprint(index_left)  # Output: 2\n\nindex_right = sorted_dict.bisect_right(4)  # Finds position > 4\nprint(index_right)  # Output: 2\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["For ",(0,r.jsx)(n.code,{children:"SortedSet"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sortedcontainers import SortedSet\n\nsorted_set = SortedSet([1, 3, 5])\n\n# Index to insert 4 (keeping elements sorted)\nindex_left = sorted_set.bisect_left(4)\nprint(index_left)  # Output: 2\n\nindex_right = sorted_set.bisect_right(4)\nprint(index_right)  # Output: 2\n"})}),"\n",(0,r.jsx)(n.h4,{id:"2-using-irange",children:(0,r.jsxs)(n.strong,{children:["2. Using ",(0,r.jsx)(n.code,{children:"irange"})]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Goal"}),": Retrieve keys (or values for ",(0,r.jsx)(n.code,{children:"SortedSet"}),") within a range."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["For ",(0,r.jsx)(n.code,{children:"SortedDict"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sortedcontainers import SortedDict\n\nsorted_dict = SortedDict({1: "one", 3: "three", 5: "five"})\n\n# Get all keys between 2 and 5 inclusive\nkeys_in_range = list(sorted_dict.irange(2, 5))\nprint(keys_in_range)  # Output: [3, 5]\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["For ",(0,r.jsx)(n.code,{children:"SortedSet"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sortedcontainers import SortedSet\n\nsorted_set = SortedSet([1, 3, 5])\n\n# Get elements between 2 and 5, excluding 5\nelements_in_range = list(sorted_set.irange(2, 5, inclusive=(True, False)))\nprint(elements_in_range)  # Output: [3]\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"ordered-dict",children:"Ordered Dict"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"OrderedDict"})," is a subclass of ",(0,r.jsx)(n.code,{children:"dict"})," in the ",(0,r.jsx)(n.code,{children:"collections"})," module that remembers the order in which items are inserted."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"key-features",children:[(0,r.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Preserves Insertion Order"}),": Items are iterated in the order they were added."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Efficient Reordering"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"move_to_end(key, last=True)"})," to move a key to the beginning or end."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dictionary-Like Operations"}),": Supports all standard ",(0,r.jsx)(n.code,{children:"dict"})," operations (e.g., ",(0,r.jsx)(n.code,{children:"get"}),", ",(0,r.jsx)(n.code,{children:"set"}),", ",(0,r.jsx)(n.code,{children:"pop"}),", etc.)."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"example-1",children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from collections import OrderedDict\n\n# Create an OrderedDict\nod = OrderedDict()\nod['a'] = 1\nod['b'] = 2\nod['c'] = 3\n\n# Access and reorder\nod.move_to_end('a')  # Moves 'a' to the end\nprint(od)  # Output: OrderedDict([('b', 2), ('c', 3), ('a', 1)])\n\n# Remove the first item\nod.popitem(last=False)  # Removes 'b'\nprint(od)  # Output: OrderedDict([('c', 3), ('a', 1)])\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"lambda-function",children:"Lambda function"}),"\n",(0,r.jsx)(n.h3,{id:"lambda-in-python",children:"Lambda in Python"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"lambda"})," is an anonymous function in Python, defined using the ",(0,r.jsx)(n.code,{children:"lambda"})," keyword. It can have multiple arguments but\nonly a single expression, which is returned when the function is called."]}),"\n",(0,r.jsx)(n.h4,{id:"syntax-1",children:"Syntax:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"lambda arguments: expression\n"})}),"\n",(0,r.jsx)(n.h4,{id:"key-features-1",children:"Key Features:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Anonymous"}),": No function name."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Compact"}),": Defined in a single line."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Inline Use"}),": Often used as an argument to higher-order functions like ",(0,r.jsx)(n.code,{children:"map"}),", ",(0,r.jsx)(n.code,{children:"filter"}),", and ",(0,r.jsx)(n.code,{children:"sorted"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"examples-1",children:"Examples:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Use Case"}),(0,r.jsx)(n.th,{children:"Code"}),(0,r.jsx)(n.th,{children:"Output"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Basic Example"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"square = lambda x: x * x"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"square(4)"})," \u2192 ",(0,r.jsx)(n.code,{children:"16"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Multiple Arguments"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"add = lambda x, y: x + y"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"add(3, 5)"})," \u2192 ",(0,r.jsx)(n.code,{children:"8"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Sort with Key"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sorted([(1, 'b'), (2, 'a')], key=lambda x: x[1])"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"[(2, 'a'), (1, 'b')]"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Filter Even Numbers"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"list(filter(lambda x: x % 2 == 0, [1, 2, 3]))"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"[2]"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Map to Square"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"list(map(lambda x: x * x, [1, 2, 3]))"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"[1, 4, 9]"})})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"limitations",children:"Limitations:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Limited to a single expression."}),"\n",(0,r.jsxs)(n.li,{children:["Not ideal for complex logic; use ",(0,r.jsx)(n.code,{children:"def"})," for readability."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"other-important-libraries",children:"Other important libraries"}),"\n",(0,r.jsxs)(n.h3,{id:"bisect-as-a-quick-way-to-do-binary-search-over-sorted-lists",children:[(0,r.jsx)(n.code,{children:"bisect"})," as a quick way to do binary search over sorted lists"]}),"\n",(0,r.jsx)(n.p,{children:"Python provides an internal library called bisect that allows you to perform binary search operations on sorted lists.\nHere\u2019s how to use it:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Method"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Description"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Example"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Output"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bisect_left"})}),(0,r.jsxs)(n.td,{children:["Finds the index to insert an element while maintaining order. Returns the ",(0,r.jsx)(n.strong,{children:"first valid position"})," for duplicates."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bisect.bisect_left([1, 3, 4, 7], 4)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"2"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bisect_right"})}),(0,r.jsxs)(n.td,{children:["Finds the index to insert an element while maintaining order. Returns the ",(0,r.jsx)(n.strong,{children:"next valid position"})," after duplicates."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bisect.bisect_right([1, 3, 4, 7], 4)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"3"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"insort_left"})}),(0,r.jsxs)(n.td,{children:["Inserts an element into the list at the position determined by ",(0,r.jsx)(n.code,{children:"bisect_left"}),"."]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"lst = [1, 3, 4]; bisect.insort_left(lst, 2)"}),(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"print(lst)"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"[1, 2, 3, 4]"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"insort_right"})}),(0,r.jsxs)(n.td,{children:["Inserts an element into the list at the position determined by ",(0,r.jsx)(n.code,{children:"bisect_right"}),"."]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"lst = [1, 3, 4]; bisect.insort_right(lst, 2)"}),(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"print(lst)"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"[1, 2, 3, 4]"})})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"notes-2",children:"Notes:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Replace ",(0,r.jsx)(n.code,{children:"bisect_right"})," with ",(0,r.jsx)(n.code,{children:"bisect"})," as they are synonymous."]}),"\n",(0,r.jsx)(n.li,{children:"Ensure the input list is sorted for accurate results."}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>l});var i=s(6540);const r={},t=i.createContext(r);function d(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);