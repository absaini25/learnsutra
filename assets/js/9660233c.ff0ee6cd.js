"use strict";(self.webpackChunklearnsutra=self.webpackChunklearnsutra||[]).push([[31],{9416:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Cheat Sheets/python-for-java-dev","title":"Python cheat sheet for a Java Developer","description":"---","source":"@site/docs/Cheat Sheets/python-for-java-dev.md","sourceDirName":"Cheat Sheets","slug":"/Cheat Sheets/python-for-java-dev","permalink":"/docs/Cheat Sheets/python-for-java-dev","draft":false,"unlisted":false,"editUrl":"https://github.com/absaini25/learnsutra/docs/Cheat Sheets/python-for-java-dev.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Python knowledge for DSA","permalink":"/docs/Cheat Sheets/python-for-dsa"},"next":{"title":"Introduction","permalink":"/docs/Dynamic Programming/intro"}}');var i=t(4848),r=t(8453);const a={},o="Python cheat sheet for a Java Developer",l={},d=[{value:"<strong>Input/Output</strong>",id:"inputoutput",level:3},{value:"<strong>Data Types</strong>",id:"data-types",level:3},{value:"<strong>Common List Operations</strong>",id:"common-list-operations",level:3},{value:"<strong>Loops</strong>",id:"loops",level:3},{value:"<strong>Conditionals</strong>",id:"conditionals",level:3},{value:"<strong>Functions</strong>",id:"functions",level:3},{value:"<strong>Lambda Functions</strong>",id:"lambda-functions",level:3},{value:"<strong>Dictionary (HashMap Equivalent)</strong>",id:"dictionary-hashmap-equivalent",level:3},{value:"<strong>Set (HashSet Equivalent)</strong>",id:"set-hashset-equivalent",level:3},{value:"<strong>String Manipulation</strong>",id:"string-manipulation",level:3},{value:"<strong>2D Array (Matrix)</strong>",id:"2d-array-matrix",level:3},{value:"<strong>Comparison with Java</strong>",id:"comparison-with-java",level:3}];function c(n){const e={code:"code",h1:"h1",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"python-cheat-sheet-for-a-java-developer",children:"Python cheat sheet for a Java Developer"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h3,{id:"inputoutput",children:(0,i.jsx)(e.strong,{children:"Input/Output"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# Input\nn = int(input())  # Read an integer\nnums = list(map(int, input().split()))  # Read a list of integers\n\n# Output\nprint("Hello, World!")  # Print a string\nprint(nums)  # Print a list\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Java Equivalent:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'import java.util.Scanner;\n\n// Input\nScanner scanner = new Scanner(System.in);\nint n = scanner.nextInt();  // Read an integer\nList<Integer> nums = new ArrayList<>();\nwhile (scanner.hasNextInt()) {\n    nums.add(scanner.nextInt());  // Read a list of integers\n}\n\n// Output\nSystem.out.println("Hello, World!");  // Print a string\nSystem.out.println(nums);  // Print a list (you may want to print individual elements or use Arrays.toString())\n'})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h3,{id:"data-types",children:(0,i.jsx)(e.strong,{children:"Data Types"})}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Python"}),(0,i.jsx)(e.th,{children:"Java Equivalent"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"int"})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"int"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"float"})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"double"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"str"})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"String"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"list"})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"ArrayList"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"tuple"})}),(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.code,{children:"ImmutableList"})," (from libraries like Guava) or use ",(0,i.jsx)(e.code,{children:"Array"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"dict"})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"HashMap"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"set"})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"HashSet"})})]})]})]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h3,{id:"common-list-operations",children:(0,i.jsx)(e.strong,{children:"Common List Operations"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# Initialize a list\nnums = [1, 2, 3]\n\n# Add elements\nnums.append(4)  # Add 4 at the end\nnums.extend([5, 6])  # Add multiple elements\nnums.insert(1, 99)  # Add 99 at index 1\n\n# Remove elements\nnums.pop()  # Remove last element\nnums.pop(1)  # Remove element at index 1\nnums.remove(3)  # Remove first occurrence of 3\n\n# Access elements\nnums[0]  # First element\nnums[-1]  # Last element\nnums[1:3]  # Slice (index 1 to 2)\n\n# Useful methods\nnums.sort()  # Sort in ascending order\nnums.reverse()  # Reverse the list\nnums.index(99)  # Find index of 99\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Java Equivalent:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"import java.util.ArrayList;\nimport java.util.Collections;\n\n// Initialize a list\nList<Integer> nums = new ArrayList<>();\nnums.add(1);\nnums.add(2);\nnums.add(3);\n\n// Add elements\nnums.add(4);  // Add 4 at the end\nCollections.addAll(nums, 5, 6);  // Add multiple elements\nnums.add(1, 99);  // Add 99 at index 1\n\n// Remove elements\nnums.remove(nums.size() - 1);  // Remove last element\nnums.remove(1);  // Remove element at index 1\nnums.remove(Integer.valueOf(3));  // Remove first occurrence of 3\n\n// Access elements\nint first = nums.get(0);  // First element\nint last = nums.get(nums.size() - 1);  // Last element\nList<Integer> slice = nums.subList(1, 3);  // Slice (index 1 to 2)\n\n// Useful methods\nCollections.sort(nums);  // Sort in ascending order\nCollections.reverse(nums);  // Reverse the list\nint index = nums.indexOf(99);  // Find index of 99\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h3,{id:"loops",children:(0,i.jsx)(e.strong,{children:"Loops"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# For loop\nfor i in range(5):  # Equivalent to for (int i = 0; i < 5; i++)\n    print(i)\n\n# While loop\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Java Equivalent:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"// For loop\nfor (int i = 0; i < 5; i++) {\n    System.out.println(i);\n}\n\n// While loop\nint i = 0;\nwhile (i < 5) {\n    System.out.println(i);\n    i++;\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h3,{id:"conditionals",children:(0,i.jsx)(e.strong,{children:"Conditionals"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'if x > 0:\n    print("Positive")\nelif x < 0:\n    print("Negative")\nelse:\n    print("Zero")\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Java Equivalent:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'if (x > 0) {\n    System.out.println("Positive");\n} else if (x < 0) {\n    System.out.println("Negative");\n} else {\n    System.out.println("Zero");\n}\n'})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h3,{id:"functions",children:(0,i.jsx)(e.strong,{children:"Functions"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# Function definition\ndef add(a, b):\n    return a + b\n\n# Function call\nresult = add(2, 3)\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Java Equivalent:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"// Function definition\npublic int add(int a, int b) {\n    return a + b;\n}\n\n// Function call\nint result = add(2, 3);\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h3,{id:"lambda-functions",children:(0,i.jsx)(e.strong,{children:"Lambda Functions"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# Anonymous function\nsquare = lambda x: x * x\nprint(square(5))  # Output: 25\n\n# Sort with custom key\nnums = [(1, 2), (3, 1), (5, 0)]\nnums.sort(key=lambda x: x[1])  # Sort by second element\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Java Equivalent:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"// Anonymous function (Lambda expression)\nFunction<Integer, Integer> square = x -> x * x;\nSystem.out.println(square.apply(5));  // Output: 25\n\n// Sort with custom comparator\nList<int[]> nums = Arrays.asList(new int[]{1, 2}, new int[]{3, 1}, new int[]{5, 0});\nnums.sort((a, b) -> Integer.compare(a[1], b[1]));  // Sort by second element\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h3,{id:"dictionary-hashmap-equivalent",children:(0,i.jsx)(e.strong,{children:"Dictionary (HashMap Equivalent)"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# Initialize a dictionary\nd = {'a': 1, 'b': 2}\n\n# Add/Update\nd['c'] = 3  # Add key 'c' with value 3\n\n# Access\nprint(d['a'])  # Access value of key 'a'\n\n# Check existence\nif 'b' in d:\n    print(\"Key exists\")\n\n# Iterate\nfor key, value in d.items():\n    print(key, value)\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Java Equivalent:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'import java.util.HashMap;\nimport java.util.Map;\n\n// Initialize a HashMap\nMap<String, Integer> d = new HashMap<>();\nd.put("a", 1);\nd.put("b", 2);\n\n// Add/Update\nd.put("c", 3);  // Add key \'c\' with value 3\n\n// Access\nSystem.out.println(d.get("a"));  // Access value of key \'a\'\n\n// Check existence\nif (d.containsKey("b")) {\n    System.out.println("Key exists");\n}\n\n// Iterate\nfor (Map.Entry<String, Integer> entry : d.entrySet()) {\n    System.out.println(entry.getKey() + " " + entry.getValue());\n}\n'})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h3,{id:"set-hashset-equivalent",children:(0,i.jsx)(e.strong,{children:"Set (HashSet Equivalent)"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# Initialize a set\ns = {1, 2, 3}\n\n# Add\ns.add(4)\n\n# Remove\ns.remove(2)  # Throws an error if not found\ns.discard(5)  # No error if not found\n\n# Common operations\nunion = s | {5, 6}  # Union\nintersection = s & {2, 3, 4}  # Intersection\ndifference = s - {2, 4}  # Difference\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Java Equivalent:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"import java.util.HashSet;\nimport java.util.Set;\n\n// Initialize a HashSet\nSet<Integer> s = new HashSet<>();\ns.add(1);\ns.add(2);\ns.add(3);\n\n// Add\ns.add(4);\n\n// Remove\ns.remove(2);  // Throws an error if not found\ns.remove(5);  // No error if not found\n\n// Common operations\nSet<Integer> union = new HashSet<>(s);\nunion.addAll(Set.of(5, 6));  // Union\nSet<Integer> intersection = new HashSet<>(s);\nintersection.retainAll(Set.of(2, 3, 4));  // Intersection\nSet<Integer> difference = new HashSet<>(s);\ndifference.removeAll(Set.of(2, 4));  // Difference\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h3,{id:"string-manipulation",children:(0,i.jsx)(e.strong,{children:"String Manipulation"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# Initialize\ns = \"leetcode\"\n\n# Access\nprint(s[0])  # First character\nprint(s[-1])  # Last character\n\n# Slicing\nprint(s[1:4])  # Substring (index 1 to 3)\n\n# Split and Join\nwords = s.split('e')  # Split on 'e'\nprint('-'.join(words))  # Join with '-'\n\n# Common methods\nprint(s.upper())  # Convert to uppercase\nprint(s.lower())  # Convert to lowercase\nprint(s.replace('e', 'a'))  # Replace all 'e' with 'a'\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Java Equivalent:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"// Initialize\nString s = \"leetcode\";\n\n// Access\nSystem.out.println(s.charAt(0));  // First character\nSystem.out.println(s.charAt(s.length() - 1));  // Last character\n\n// Slicing (use substring method)\nSystem.out.println(s.substring(1, 4));  // Substring (index 1 to 3)\n\n// Split and Join\nString[] words = s.split(\"e\");  // Split on 'e'\n\n\nSystem.out.println(String.join(\"-\", words));  // Join with '-'\n\n// Common methods\nSystem.out.println(s.toUpperCase());  // Convert to uppercase\nSystem.out.println(s.toLowerCase());  // Convert to lowercase\nSystem.out.println(s.replace('e', 'a'));  // Replace all 'e' with 'a'\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h3,{id:"2d-array-matrix",children:(0,i.jsx)(e.strong,{children:"2D Array (Matrix)"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# Initialize\nmatrix = [[0] * 3 for _ in range(3)]  # 3x3 matrix of zeros\n\n# Access\nprint(matrix[0][1])  # Access row 0, column 1\n\n# Iterate\nfor row in matrix:\n    for val in row:\n        print(val)\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Java Equivalent:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"// Initialize\nint[][] matrix = new int[3][3];  // 3x3 matrix of zeros\n\n// Access\nSystem.out.println(matrix[0][1]);  // Access row 0, column 1\n\n// Iterate\nfor (int[] row : matrix) {\n    for (int val : row) {\n        System.out.println(val);\n    }\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h3,{id:"comparison-with-java",children:(0,i.jsx)(e.strong,{children:"Comparison with Java"})}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Java Code"}),(0,i.jsx)(e.th,{children:"Python Equivalent"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"for (int i = 0; i < n; i++)"})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"for i in range(n)"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"if (x > 0)"})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"if x > 0:"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"int[] arr = new int[n]"})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"arr = [0] * n"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"ArrayList<Integer> list = new..."})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"list = []"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"HashMap<String, Integer>"})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"dict = {}"})})]})]})]}),"\n",(0,i.jsx)(e.hr,{})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);